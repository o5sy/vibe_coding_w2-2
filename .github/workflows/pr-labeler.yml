name: PR Auto Labeler

on:
  pull_request:
    types: [opened, synchronize, edited]

jobs:
  label:
    runs-on: ubuntu-latest
    steps:
      - name: Auto label PR
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const { number: pull_number } = context.issue;
            const pr = context.payload.pull_request;

            // PR 파일 변경사항 가져오기
            const { data: files } = await github.rest.pulls.listFiles({
              owner,
              repo,
              pull_number
            });

            const changedFiles = files.map(file => file.filename);
            const title = pr.title.toLowerCase();
            const body = (pr.body || '').toLowerCase();
            const branchName = pr.head.ref.toLowerCase();

            let labels = [];

            // 타입 라벨 결정
            if (branchName.includes('feature/') || title.includes('feat') || title.includes('feature')) {
              labels.push('type: feature');
            } else if (branchName.includes('bugfix/') || branchName.includes('fix/') || title.includes('fix') || title.includes('bug')) {
              labels.push('type: bugfix');
            } else if (branchName.includes('hotfix/') || title.includes('hotfix')) {
              labels.push('type: hotfix');
            } else if (title.includes('refactor') || title.includes('refact')) {
              labels.push('type: refactor');
            } else if (title.includes('doc') || title.includes('문서')) {
              labels.push('type: docs');
            }

            // 우선순위 라벨 결정
            if (title.includes('urgent') || title.includes('critical') || title.includes('긴급') || branchName.includes('hotfix/')) {
              labels.push('priority: high');
            } else if (title.includes('minor') || title.includes('small') || title.includes('사소')) {
              labels.push('priority: low');
            } else {
              labels.push('priority: medium');
            }

            // 파일 변경사항 기반 라벨
            const backendFiles = changedFiles.filter(file => 
              file.startsWith('backend/') || 
              file.includes('fastapi') || 
              file.includes('langgraph')
            );

            const frontendFiles = changedFiles.filter(file => 
              file.startsWith('frontend/') || 
              file.includes('streamlit')
            );

            const docFiles = changedFiles.filter(file => 
              file.startsWith('docs/') || 
              file.endsWith('.md') ||
              file.startsWith('.cursor/rules/')
            );

            const testFiles = changedFiles.filter(file => 
              file.includes('test') || 
              file.includes('spec')
            );

            const ciFiles = changedFiles.filter(file => 
              file.startsWith('.github/') ||
              file.includes('workflow')
            );

            // 영역별 라벨 추가
            if (backendFiles.length > 0) {
              labels.push('area: backend');
            }

            if (frontendFiles.length > 0) {
              labels.push('area: frontend');
            }

            if (docFiles.length > 0) {
              labels.push('area: documentation');
            }

            if (testFiles.length > 0) {
              labels.push('area: testing');
            }

            if (ciFiles.length > 0) {
              labels.push('area: ci-cd');
            }

            // 크기 라벨 결정 (변경된 라인 수 기준)
            const totalChanges = files.reduce((sum, file) => sum + file.changes, 0);

            if (totalChanges > 500) {
              labels.push('size: large');
            } else if (totalChanges > 100) {
              labels.push('size: medium');
            } else {
              labels.push('size: small');
            }

            // 상태 라벨
            if (pr.draft) {
              labels.push('status: draft');
            } else {
              labels.push('status: in-review');
            }

            // 중복 제거
            labels = [...new Set(labels)];

            console.log('Applying labels:', labels);

            // 라벨 적용
            try {
              // 먼저 기존 자동 라벨들 제거 (수동으로 추가된 라벨은 유지)
              const { data: currentLabels } = await github.rest.issues.listLabelsOnIssue({
                owner,
                repo,
                issue_number: pull_number
              });
              
              const autoLabels = currentLabels.filter(label => 
                label.name.startsWith('type:') ||
                label.name.startsWith('priority:') ||
                label.name.startsWith('area:') ||
                label.name.startsWith('size:') ||
                label.name.startsWith('status:')
              ).map(label => label.name);
              
              // 기존 자동 라벨 제거
              for (const label of autoLabels) {
                try {
                  await github.rest.issues.removeLabel({
                    owner,
                    repo,
                    issue_number: pull_number,
                    name: label
                  });
                } catch (error) {
                  console.log(`Failed to remove label ${label}:`, error.message);
                }
              }
              
              // 새 라벨 추가
              if (labels.length > 0) {
                await github.rest.issues.addLabels({
                  owner,
                  repo,
                  issue_number: pull_number,
                  labels
                });
              }
              
              console.log('Labels applied successfully');
              
            } catch (error) {
              console.log('Labeling failed:', error.message);
              
              // 라벨링 실패시 댓글로 알림
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pull_number,
                body: `## 🏷️ 자동 라벨링 정보

                **감지된 변경사항:**
                - 총 변경 라인: ${totalChanges}줄
                ${backendFiles.length > 0 ? `- 백엔드 파일: ${backendFiles.length}개\n` : ''}
                ${frontendFiles.length > 0 ? `- 프론트엔드 파일: ${frontendFiles.length}개\n` : ''}
                ${docFiles.length > 0 ? `- 문서 파일: ${docFiles.length}개\n` : ''}
                ${testFiles.length > 0 ? `- 테스트 파일: ${testFiles.length}개\n` : ''}
                ${ciFiles.length > 0 ? `- CI/CD 파일: ${ciFiles.length}개\n` : ''}
                
                **제안 라벨:** ${labels.join(', ')}
                
                적절한 라벨을 수동으로 추가해주세요.
                
                ---
                *이 댓글은 자동으로 생성되었습니다.*`
              });
            }
