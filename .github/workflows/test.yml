name: Run Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
          if [ -f frontend/requirements.txt ]; then pip install -r frontend/requirements.txt; fi
          pip install pytest pytest-cov pytest-asyncio httpx

      - name: Run backend tests
        run: |
          cd backend
          python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
        env:
          PYTHONPATH: ${{ github.workspace }}/backend

      - name: Run frontend tests
        run: |
          cd frontend
          if [ -d tests ]; then
            python -m pytest tests/ -v
          else
            echo "No frontend tests found, skipping..."
          fi
        env:
          PYTHONPATH: ${{ github.workspace }}/frontend

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = './backend/htmlcov/index.html';

            if (fs.existsSync(path)) {
              const coverage = fs.readFileSync(path, 'utf8');
              const match = coverage.match(/pc_cov">(\d+)%</);
              const coveragePercent = match ? match[1] : 'Unknown';
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 테스트 결과 📊\n\n✅ 모든 테스트가 통과했습니다!\n\n**코드 커버리지**: ${coveragePercent}%\n\n자세한 내용은 [Actions 탭](${context.payload.pull_request.html_url}/checks)에서 확인하세요.`
              });
            }
